
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ezknucluuyvhphhbsdga.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV6a251Y2x1dXl2aHBoaGJzZGdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzNTQxNjcsImV4cCI6MjA2MTkzMDE2N30.JGT4tn0LpbqvXb5PS7H-3FSJAzZqVdL_Tw2AZ45Ojr0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Normalizes CSV column headers to match database column names
 * @param data Array of objects from CSV
 * @param tableType Type of table to normalize for ('zoning', 'parking', 'ada')
 * @returns Normalized data with transformed keys
 */
export function normalizeCSVColumns(data: any[], tableType: 'zoning' | 'parking' | 'ada'): any[] {
  if (!data || !Array.isArray(data) || data.length === 0) {
    return [];
  }
  
  // Define column mapping for each table type
  const columnMappings: Record<string, Record<string, string>> = {
    zoning: {
      'County': 'county',
      'Zoning District': 'zoning_district',
      'Front Setback': 'front_setback',
      'Side Setback': 'side_setback',
      'Rear Setback': 'rear_setback',
      'Max FAR': 'max_far',
      'Max Height': 'max_height',
      'Max Lot Coverage': 'max_lot_coverage',
      'Parking Required': 'parking_required',
      'ADA Stalls Required': 'ada_stalls_required'
    },
    parking: {
      'County': 'county',
      'Use Type': 'use_type',
      'Parking Requirement': 'parking_requirement'
    },
    ada: {
      'Total Parking Spaces': 'total_parking_spaces_provided',
      'Total Parking Spaces Provided': 'total_parking_spaces_provided',
      'Minimum Required ADA Stalls': 'minimum_required_ada_stalls',
      'Required ADA Stalls': 'minimum_required_ada_stalls'
    }
  };
  
  const mapping = columnMappings[tableType];
  
  // Transform each row's keys
  return data.map(row => {
    const newRow: Record<string, any> = {};
    
    // Process each key in the row
    Object.keys(row).forEach(key => {
      // Try to find an exact match first
      if (key in mapping) {
        newRow[mapping[key]] = row[key];
      } else {
        // Try to find a case-insensitive match
        const matchKey = Object.keys(mapping).find(
          mapKey => mapKey.toLowerCase() === key.toLowerCase()
        );
        
        if (matchKey) {
          newRow[mapping[matchKey]] = row[key];
        } else {
          // If no match found, normalize the key and use it as is
          const normalizedKey = key.toLowerCase().replace(/[^a-z0-9]/g, '_');
          newRow[normalizedKey] = row[key];
        }
      }
    });
    
    // For ADA datasets, ensure the minimum_required_ada_stalls is converted to a number
    if (tableType === 'ada') {
      // If the value is already numeric, we're good
      if (newRow.minimum_required_ada_stalls && !isNaN(Number(newRow.minimum_required_ada_stalls))) {
        newRow.minimum_required_ada_stalls = Number(newRow.minimum_required_ada_stalls);
      } 
      // If it's not numeric, try to extract a number
      else if (newRow.minimum_required_ada_stalls && typeof newRow.minimum_required_ada_stalls === 'string') {
        const match = newRow.minimum_required_ada_stalls.match(/(\d+)/);
        if (match) {
          newRow.minimum_required_ada_stalls = Number(match[1]);
        } else {
          console.warn(`Could not parse numeric value from ADA stalls: ${newRow.minimum_required_ada_stalls}`);
          newRow.minimum_required_ada_stalls = 0; // Default to 0 if we can't parse it
        }
      }
      
      // Ensure total_parking_spaces_provided is a string
      if (newRow.total_parking_spaces_provided !== undefined) {
        newRow.total_parking_spaces_provided = String(newRow.total_parking_spaces_provided);
      }
    }
    
    return newRow;
  });
}

/**
 * Debug utility to log column transformations for troubleshooting
 */
export function logColumnTransformation(originalData: any[], normalizedData: any[]): void {
  if (!originalData.length || !normalizedData.length) return;
  
  console.log('--- CSV Column Transformation Debug ---');
  console.log('Original columns:', Object.keys(originalData[0]));
  console.log('Transformed columns:', Object.keys(normalizedData[0]));
  console.log('First row before:', originalData[0]);
  console.log('First row after:', normalizedData[0]);
}

